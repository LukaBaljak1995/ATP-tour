/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form;

import constants.Constants;
import generator.GeneratorMeceva;
import java.awt.Frame;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;
import domen.KategorijaTurnira;
import domen.Mec;
import domen.Teniser;
import domen.Turnir;
import domen.UcesceNaTurniru;
import controller.Controller;
import java.io.IOException;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.util.ArrayList;
import session.Session;
import tablemodel.MecTableModel;
import tablemodel.UcesceNaTurniruModel;

/**
 *
 * @author lukabaljak
 */
public class FTurnir extends javax.swing.JDialog {

    /**
     * Creates new form FTeniser
     */
    Turnir turnir;
    boolean uInitu = true;

    public FTurnir(java.awt.Frame parent, boolean modal, Turnir turnir) {
        super(parent, modal);
        this.turnir = turnir;

        initComponents();

        jButtonSacuvaj.setVisible(false);
        AbstractTableModel model = new MecTableModel();
        jTableMecevi.setModel(model);
        podesiComboBoxeve();
        try {
            urediFormu(turnir);
            centrirajForm();
        } catch (Exception ex) {
            ex.printStackTrace();
            Logger.getLogger(FTurnir.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldNaziv = new javax.swing.JTextField();
        jTextFieldGrad = new javax.swing.JTextField();
        jComboBoxPodloga = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jComboBoxKategorijaTurnira = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jComboBoxPocetakGodina = new javax.swing.JComboBox<>();
        jComboBoxKrajDan = new javax.swing.JComboBox<>();
        jComboBoxKrajMesec = new javax.swing.JComboBox<>();
        jComboBoxKrajGodina = new javax.swing.JComboBox<>();
        jComboBoxPocetakDan = new javax.swing.JComboBox<>();
        jComboBoxPocetakMesec = new javax.swing.JComboBox<>();
        jButtonKreiraj = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableUcesnici = new javax.swing.JTable();
        jButtonDodajUcesnika = new javax.swing.JButton();
        jButtonObrisiUcesnika = new javax.swing.JButton();
        jButtonGenerisiMeceve = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableMecevi = new javax.swing.JTable();
        jButtonSacuvaj = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Turnir");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Podaci o turniru:"));

        jLabel1.setText("Naziv:");

        jLabel2.setText("Grad:");

        jLabel3.setText("Podloga:");

        jComboBoxPodloga.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "beton", "trava", "Å¡ljaka" }));
        jComboBoxPodloga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxPodlogaActionPerformed(evt);
            }
        });

        jLabel4.setText("Kategorija: ");

        jLabel5.setText("Pocetak:");

        jLabel6.setText("Kraj:");

        jComboBoxPocetakGodina.setModel(new javax.swing.DefaultComboBoxModel<>());
        jComboBoxPocetakGodina.setEnabled(false);

        jComboBoxKrajDan.setModel(new javax.swing.DefaultComboBoxModel<>());
        jComboBoxKrajDan.setEnabled(false);

        jComboBoxKrajMesec.setModel(new javax.swing.DefaultComboBoxModel<>());
        jComboBoxKrajMesec.setEnabled(false);

        jComboBoxKrajGodina.setModel(new javax.swing.DefaultComboBoxModel<>());
        jComboBoxKrajGodina.setEnabled(false);

        String dani[] = new String[31];
        for(int iDani = 1; iDani<=31; iDani++){
            dani[iDani-1] = String.valueOf(iDani);
        }
        jComboBoxPocetakDan.setModel(new javax.swing.DefaultComboBoxModel<>(dani));
        jComboBoxPocetakDan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxPocetakDanActionPerformed(evt);
            }
        });

        String meseci[] = new String[12];
        for(int iMeseci = 1; iMeseci<=12; iMeseci++){
            meseci[iMeseci-1] = String.valueOf(iMeseci);
        }
        jComboBoxPocetakMesec.setModel(new javax.swing.DefaultComboBoxModel<>(meseci));
        jComboBoxPocetakMesec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxPocetakMesecActionPerformed(evt);
            }
        });
        this.uInitu = false;

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldNaziv)
                            .addComponent(jTextFieldGrad)
                            .addComponent(jComboBoxPodloga, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxKategorijaTurnira, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(39, 39, 39)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBoxKrajDan, 0, 64, Short.MAX_VALUE)
                            .addComponent(jComboBoxPocetakDan, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBoxPocetakMesec, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxKrajMesec, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(3, 3, 3)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxPocetakGodina, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxKrajGodina, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(33, 33, 33))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldNaziv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldGrad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBoxPodloga, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxKategorijaTurnira, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jComboBoxPocetakGodina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxPocetakDan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxPocetakMesec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBoxKrajMesec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBoxKrajGodina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBoxKrajDan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        jButtonKreiraj.setText("Kreiraj");
        jButtonKreiraj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonKreirajActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("UÄesnici"));

        jTableUcesnici.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTableUcesnici);

        jButtonDodajUcesnika.setText("+");
        jButtonDodajUcesnika.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDodajUcesnikaActionPerformed(evt);
            }
        });

        jButtonObrisiUcesnika.setText("-");
        jButtonObrisiUcesnika.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonObrisiUcesnikaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonObrisiUcesnika, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDodajUcesnika, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jButtonDodajUcesnika)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonObrisiUcesnika)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        jButtonGenerisiMeceve.setText("Generisi meceve");
        jButtonGenerisiMeceve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenerisiMeceveActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("MeÄevi"));

        jTableMecevi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTableMecevi);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
        );

        jButtonSacuvaj.setText("Sacuvaj");
        jButtonSacuvaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSacuvajActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonSacuvaj)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonKreiraj, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButtonGenerisiMeceve, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonKreiraj)
                .addGap(26, 26, 26)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonGenerisiMeceve)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonSacuvaj)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonKreirajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonKreirajActionPerformed
        try {
            if ((jTextFieldNaziv.getText().isEmpty()) || (jTextFieldGrad.getText().isEmpty())
                    || (jComboBoxPocetakDan.getSelectedIndex() == (-1))
                    || (jComboBoxPocetakMesec.getSelectedIndex() == (-1))) {
                JOptionPane.showMessageDialog(this, "Popunite sva polja!");
                return;
            }

            Turnir t = new Turnir(jTextFieldNaziv.getText(),
                    jComboBoxPodloga.getSelectedItem().toString(), jTextFieldGrad.getText(),
                    (KategorijaTurnira) jComboBoxKategorijaTurnira.getSelectedItem(),
                    LocalDate.of(Integer.parseInt((String) jComboBoxPocetakGodina.getSelectedItem()),
                            Integer.parseInt((String) jComboBoxPocetakMesec.getSelectedItem()),
                            Integer.parseInt((String) jComboBoxPocetakDan.getSelectedItem())),
                    LocalDate.of((int) jComboBoxKrajGodina.getSelectedItem(),
                            (int) jComboBoxKrajMesec.getSelectedItem(),
                            (int) jComboBoxKrajDan.getSelectedItem()));

            this.turnir = t;
            this.turnir = Controller.sacuvajTurnir(t);
            JOptionPane.showMessageDialog(this, "Turnir je uspeÅ¡no saÄuvan!");
            urediFormu(turnir);
        } catch (Exception ex) {
            Logger.getLogger(FTurnir.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Turnir nije saÄuvan!");
        }
    }//GEN-LAST:event_jButtonKreirajActionPerformed

    private void jComboBoxPodlogaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxPodlogaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxPodlogaActionPerformed

    private void jButtonDodajUcesnikaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDodajUcesnikaActionPerformed
        FRangLista fRangLista
                = new FRangLista((Frame) this.getParent(), rootPaneCheckingEnabled, Constants.ODABIR_UCESNIKA_NA_TURNIRU);
        fRangLista.setVisible(true);

        UcesceNaTurniruModel model = (UcesceNaTurniruModel) jTableUcesnici.getModel();
        if (!Session.getInstance().getMap().containsKey(Constants.ODABRANI_TENISER)) {
            JOptionPane.showMessageDialog(rootPane, "Morate prvo odabrati tenisera!");
            return;
        }
        Teniser teniserEntity = (Teniser) Session.getInstance().getMap().get(Constants.ODABRANI_TENISER);
        try {
            if (Controller.ucestvujeLiNaNekomTurniruUTojNedelji(teniserEntity, turnir)) {
                JOptionPane.showMessageDialog(rootPane, teniserEntity.getImePrezime() + " vec ucestvuje na nekom turniru u toj nedelji!");
                //System.out.println(teniserEntity.getImePrezime() + " vec ucestvuje na nekom turniru u toj nedelji!");
                return;
            }
        } catch (IOException ex) {
            Logger.getLogger(FTurnir.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FTurnir.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (model.getTeniseriKojiUcestvuju().contains(teniserEntity)) {
            JOptionPane.showMessageDialog(rootPane, "Odabrani teniser vec ucestvuje na turniru!");
            fRangLista.setVisible(true);
        } else {
            //int rank = (int) Session.getInstance().getMap().get(Constants.RANK);
            model.dodajUcesnika(teniserEntity);
            try {
                Controller.sacuvajUcesceNaTurniru(new UcesceNaTurniru(this.turnir, teniserEntity));
            } catch (Exception ex) {
                Logger.getLogger(FTurnir.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

        try {
            int indikator = Controller.dajTenisereKojiUcestvuju(this.turnir).size();
            if (indikator == this.turnir.getKategorijaTurnira().getMaksimalanBrojTenisera()) {
                setSize(440, 570);
                jButtonGenerisiMeceve.setVisible(true);
                jButtonDodajUcesnika.setEnabled(false);
            }
        } catch (Exception ex) {
            Logger.getLogger(FTurnir.class.getName()).log(Level.SEVERE, null, ex);
        }

        Session.getInstance().getMap().remove(Constants.ODABRANI_TENISER);
    }//GEN-LAST:event_jButtonDodajUcesnikaActionPerformed

    private void jButtonGenerisiMeceveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenerisiMeceveActionPerformed
        setSize(440, 780);
        centrirajForm();
        jPanel3.setVisible(true);
        jButtonSacuvaj.setVisible(true);

        MecTableModel mecTableModel = (MecTableModel) jTableMecevi.getModel();
        UcesceNaTurniruModel ucesceNaTurniruModel = (UcesceNaTurniruModel) jTableUcesnici.getModel();

        try {
            List<Teniser> teniseri = new ArrayList<>();
            for (Teniser teniserEntity : ucesceNaTurniruModel.getTeniseriKojiUcestvuju()) {
                teniseri.add(teniserEntity);
            }
            System.out.println(teniseri.size());
            GeneratorMeceva generatorMeceva = new GeneratorMeceva(this.turnir,
                    teniseri,
                    this.turnir.getKategorijaTurnira().getMaksimalanBrojTenisera());
            generatorMeceva.generisiMeceve();
            mecTableModel.dodajMeceve(generatorMeceva.getMecevi());

            jButtonGenerisiMeceve.setVisible(false);
            jButtonObrisiUcesnika.setEnabled(false);
        } catch (Exception ex) {
            Logger.getLogger(FTurnir.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jButtonGenerisiMeceveActionPerformed

    private void jButtonObrisiUcesnikaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonObrisiUcesnikaActionPerformed
        int odabraniRed = jTableUcesnici.getSelectedRow();
        if (odabraniRed != -1) {
            UcesceNaTurniruModel model = (UcesceNaTurniruModel) jTableUcesnici.getModel();
            Teniser teniser = model.getTeniseriKojiUcestvuju().get(odabraniRed);
            model.obrisiUcesnika(odabraniRed);
            try {
                Controller.obrisiUcesceNaTurniru(new UcesceNaTurniru(this.turnir, teniser));
            } catch (Exception ex) {
                Logger.getLogger(FTurnir.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Niste odarbali ucesnika za brisanje!");
        }

        try {
            int indikator = Controller.dajTenisereKojiUcestvuju(this.turnir).size();
            if (indikator < this.turnir.getKategorijaTurnira().getMaksimalanBrojTenisera()) {
                jButtonGenerisiMeceve.setVisible(false);
                jButtonDodajUcesnika.setEnabled(true);
            }
        } catch (Exception ex) {
            Logger.getLogger(FTurnir.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButtonObrisiUcesnikaActionPerformed

    private void jButtonSacuvajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSacuvajActionPerformed
        jButtonSacuvaj.setVisible(false);
        MecTableModel model = (MecTableModel) jTableMecevi.getModel();
        List<Mec> mecevi = model.getMecevi();
        try {
            for (Mec mec : mecevi) {
                Controller.sacuvajMec(mec);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "Dogodila se greska. Molimo probajte kasnije.");
        }

        try {
            //Controller.azurirajBrojPoenaTeniserima(mecevi);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "Dogodila se greska. Molimo probajte kasnije.");
        }

        JOptionPane.showMessageDialog(rootPane, "Sistem je uspesno sacuvao meceve na turniru!");
    }//GEN-LAST:event_jButtonSacuvajActionPerformed

    private void jComboBoxPocetakDanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxPocetakDanActionPerformed
        if (uInitu == true) {
            System.out.println(jComboBoxKrajDan.getSelectedItem());
        } else {

            if (jComboBoxPocetakDan.getSelectedItem() != null && jComboBoxPocetakMesec.getSelectedItem() != null) {
                try {
                    LocalDate datumPocetka = LocalDate.of(Integer.parseInt((String) jComboBoxPocetakGodina.getSelectedItem()),
                            Integer.parseInt((String) jComboBoxPocetakMesec.getSelectedItem()),
                            Integer.parseInt((String) jComboBoxPocetakDan.getSelectedItem()));

                    LocalDate datumZavrsetka = datumPocetka.plusDays(6);

                    jComboBoxKrajDan.removeAllItems();
                    jComboBoxKrajDan.addItem(datumZavrsetka.getDayOfMonth());
                    jComboBoxKrajDan.setSelectedItem(jComboBoxKrajDan.getItemAt(0));

                    jComboBoxKrajMesec.removeAllItems();
                    jComboBoxKrajMesec.addItem(datumZavrsetka.getMonthValue());
                    jComboBoxKrajMesec.setSelectedItem(jComboBoxKrajMesec.getItemAt(0));

                    jComboBoxKrajGodina.removeAllItems();
                    jComboBoxKrajGodina.addItem(datumZavrsetka.getYear());
                    jComboBoxKrajGodina.setSelectedItem(jComboBoxKrajGodina.getItemAt(0));

                } catch (DateTimeException dte) {
                    JOptionPane.showMessageDialog(rootPane, "Datum nije lepo formatiran!");
                    jComboBoxPocetakDan.setSelectedItem(null);
                    //ovde i brisanje dana zavrsetka turnira
                }
            }
        }
    }//GEN-LAST:event_jComboBoxPocetakDanActionPerformed

    private void jComboBoxPocetakMesecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxPocetakMesecActionPerformed
        if (uInitu == true) {
            System.out.println(jComboBoxKrajDan.getSelectedItem());
        } else {
            System.out.println("EVENT: " + jComboBoxPocetakMesec.getSelectedItem());

            if (jComboBoxPocetakDan.getSelectedItem() != null && jComboBoxPocetakMesec.getSelectedItem() != null) {
                try {
                    LocalDate datumPocetka = LocalDate.of(Integer.parseInt((String) jComboBoxPocetakGodina.getSelectedItem()),
                            Integer.parseInt((String) jComboBoxPocetakMesec.getSelectedItem()),
                            Integer.parseInt((String) jComboBoxPocetakDan.getSelectedItem()));

                    LocalDate datumZavrsetka = datumPocetka.plusDays(6);

                    jComboBoxKrajDan.removeAllItems();
                    jComboBoxKrajDan.addItem(datumZavrsetka.getDayOfMonth());
                    jComboBoxKrajDan.setSelectedItem(jComboBoxKrajDan.getItemAt(0));

                    jComboBoxKrajMesec.removeAllItems();
                    jComboBoxKrajMesec.addItem(datumZavrsetka.getMonthValue());
                    jComboBoxKrajMesec.setSelectedItem(jComboBoxKrajMesec.getItemAt(0));

                    jComboBoxKrajGodina.removeAllItems();
                    jComboBoxKrajGodina.addItem(datumZavrsetka.getYear());
                    jComboBoxKrajGodina.setSelectedItem(jComboBoxKrajGodina.getItemAt(0));

                } catch (DateTimeException dte) {
                    JOptionPane.showMessageDialog(rootPane, "Datum nije lepo formatiran!");
                    jComboBoxPocetakMesec.setSelectedItem(null);
                    //ovde i brisanje dana zavrsetka turnira
                }
            }
        }
    }//GEN-LAST:event_jComboBoxPocetakMesecActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDodajUcesnika;
    private javax.swing.JButton jButtonGenerisiMeceve;
    private javax.swing.JButton jButtonKreiraj;
    private javax.swing.JButton jButtonObrisiUcesnika;
    private javax.swing.JButton jButtonSacuvaj;
    private javax.swing.JComboBox<domen.KategorijaTurnira> jComboBoxKategorijaTurnira;
    private javax.swing.JComboBox<Integer> jComboBoxKrajDan;
    private javax.swing.JComboBox<Integer> jComboBoxKrajGodina;
    private javax.swing.JComboBox<Integer> jComboBoxKrajMesec;
    private javax.swing.JComboBox<String> jComboBoxPocetakDan;
    private javax.swing.JComboBox<String> jComboBoxPocetakGodina;
    private javax.swing.JComboBox<String> jComboBoxPocetakMesec;
    private javax.swing.JComboBox<String> jComboBoxPodloga;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTableMecevi;
    private javax.swing.JTable jTableUcesnici;
    private javax.swing.JTextField jTextFieldGrad;
    private javax.swing.JTextField jTextFieldNaziv;
    // End of variables declaration//GEN-END:variables

    private void populateComboBoxKategorije() {
        try {
            jComboBoxKategorijaTurnira.removeAllItems();
           
            List<KategorijaTurnira> kategorije = Controller.dajKategorijeTurnira();
            for (KategorijaTurnira kategorija : kategorije) {
                jComboBoxKategorijaTurnira.addItem(kategorija);
            }
        } catch (Exception ex) {
            Logger.getLogger(FTurnir.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void centrirajForm() {
        setLocationRelativeTo(null);
    }

    private void urediFormu(Turnir turnir) throws Exception {
        if (turnir == null) {
            setSize(440, 380);
            populateComboBoxKategorije();
            return;
        }
        //System.out.println(this.turnir.getKategorijaTurnira());
        //brojUcesnika = Controller.imaLiUcescaNaTurniru(this.turnir);
        System.out.println("Usao");
        List<Teniser> teniseriKojiUcestvuju = Controller.dajTenisereKojiUcestvuju(this.turnir);
        System.out.println("Prosao daj sve tenisere");
        int brojUcesnika = teniseriKojiUcestvuju.size();
        if (brojUcesnika == this.turnir.getKategorijaTurnira().getMaksimalanBrojTenisera()) {
            //sad proveri je li ima meceva, ako ima onda se i oni ucitavaju!
            boolean odigraniSviMecevi = false;
             System.out.println("Prosao da li su odigrani mecevi");
            List<Mec> mecevi = Controller.dajSveMeceve(this.turnir);
             System.out.println("Prosao daj sve meceve");
            if (mecevi.size() > 0) {
                odigraniSviMecevi = true;
            }

            jButtonKreiraj.setVisible(false);
            if (odigraniSviMecevi) {
                jPanel3.setVisible(true);

                postaviVrednostiPoljima();
                setSize(440, 780);
                setLocationRelativeTo(null);

                jButtonKreiraj.setVisible(false);
                jButtonGenerisiMeceve.setVisible(false);

                AbstractTableModel tableModel = new UcesceNaTurniruModel(turnir);
                jTableUcesnici.setModel(tableModel);
                //List<Teniser> teniseriKojiUcestvuju = Controller.dajTenisereKojiUcestvuju(this.turnir);
                UcesceNaTurniruModel model = (UcesceNaTurniruModel) jTableUcesnici.getModel();
                for (Teniser teniserEntity : teniseriKojiUcestvuju) {
                    model.dodajUcesnika(teniserEntity);
                }
                jButtonDodajUcesnika.setEnabled(false);
                jButtonObrisiUcesnika.setEnabled(false);

                //List<Mec> mecevi = Controller.dajMeceve(this.turnir);
                MecTableModel mecTableModel = (MecTableModel) jTableMecevi.getModel();
                mecTableModel.setMecevi(mecevi);
                jButtonSacuvaj.setVisible(false);

                return;
            } else {
                jPanel3.setVisible(false);

                postaviVrednostiPoljima();
                setSize(440, 600);
                setLocationRelativeTo(null);
                jButtonGenerisiMeceve.setVisible(true);

                AbstractTableModel tableModel = new UcesceNaTurniruModel(turnir);
                jTableUcesnici.setModel(tableModel);
                //List<Teniser> teniseriKojiUcestvuju = Controller.dajTenisereKojiUcestvuju(this.turnir);
                UcesceNaTurniruModel model = (UcesceNaTurniruModel) jTableUcesnici.getModel();
                for (Teniser teniserEntity : teniseriKojiUcestvuju) {
                    model.dodajUcesnika(teniserEntity);
                }
                jButtonDodajUcesnika.setEnabled(false);
            }

        }

        if (brojUcesnika < this.turnir.getKategorijaTurnira().getMaksimalanBrojTenisera()) {
            jPanel3.setVisible(false);

            postaviVrednostiPoljima();
            setSize(440, 600);
            setLocationRelativeTo(null);
            jButtonKreiraj.setVisible(false);
            jButtonGenerisiMeceve.setVisible(false);
            AbstractTableModel tableModel = new UcesceNaTurniruModel(turnir);
            jTableUcesnici.setModel(tableModel);
            //List<Teniser> teniseriKojiUcestvuju = Controller.dajTenisereKojiUcestvuju(this.turnir);
            UcesceNaTurniruModel model = (UcesceNaTurniruModel) jTableUcesnici.getModel();
            for (Teniser teniserEntity : teniseriKojiUcestvuju) {
                model.dodajUcesnika(teniserEntity);
            }
        }
    }

    private void postaviVrednostiPoljima() {
        jTextFieldNaziv.setText(turnir.getNazivTurnira());
        jTextFieldNaziv.setEnabled(false);

        jTextFieldGrad.setText(turnir.getGrad());
        jTextFieldGrad.setEnabled(false);

        jComboBoxPodloga.setSelectedItem(turnir.getPodloga());
        jComboBoxPodloga.setEnabled(false);

        jComboBoxKategorijaTurnira.addItem(turnir.getKategorijaTurnira());
        jComboBoxKategorijaTurnira.setSelectedItem(turnir.getKategorijaTurnira());
        jComboBoxKategorijaTurnira.setEnabled(false);

        System.out.println(jComboBoxPocetakDan.getItemAt(this.turnir.getDatumPocetka().getDayOfMonth() - 1));

        jComboBoxPocetakDan.setSelectedIndex(this.turnir.getDatumPocetka().getDayOfMonth() - 1);
        jComboBoxPocetakDan.setEnabled(false);

        jComboBoxPocetakMesec.setSelectedIndex(this.turnir.getDatumPocetka().getMonthValue() - 1);
        jComboBoxPocetakMesec.setEnabled(false);

        jComboBoxPocetakGodina.addItem(String.valueOf(this.turnir.getDatumPocetka().getYear()));
        jComboBoxPocetakGodina.setSelectedIndex(0);
    }

    private void podesiComboBoxeve() {
        jComboBoxPocetakDan.setSelectedItem(null);
        jComboBoxPocetakMesec.setSelectedItem(null);
        jComboBoxPocetakGodina.removeAllItems();
        LocalDate sad = LocalDate.now();
        jComboBoxPocetakGodina.addItem(String.valueOf(sad.getYear()));
        jComboBoxPocetakGodina.setSelectedItem(String.valueOf(0));
    }
}
